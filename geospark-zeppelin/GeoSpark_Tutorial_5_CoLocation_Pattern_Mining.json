{"paragraphs":[{"text":"// What is co-location pattern mining?\n// https://github.com/jiayuasu/GeoSparkTemplateProject/tree/master/geospark-analysis\n\nimport com.vividsolutions.jts.geom._\nimport org.apache.log4j.{Level, Logger}\nimport org.apache.spark.serializer.KryoSerializer\nimport org.apache.spark.sql.SparkSession\nimport org.datasyslab.geospark.enums.{GridType, IndexType}\nimport org.datasyslab.geospark.formatMapper.shapefileParser.ShapefileReader\nimport org.datasyslab.geospark.spatialOperator.JoinQuery\nimport org.datasyslab.geospark.spatialRDD.{CircleRDD, SpatialRDD}\nimport org.datasyslab.geosparksql.utils.{Adapter, GeoSparkSQLRegistrator}\nimport org.datasyslab.geosparkviz.sql.utils.GeoSparkVizRegistrator\n\nGeoSparkSQLRegistrator.registerAll(spark)\nGeoSparkVizRegistrator.registerAll(spark)\n\n// Load data\n\n// Data link (in shapefile): https://geo.nyu.edu/catalog/nyu_2451_34514\nval nycArealandmarkShapefileLocation = \"/home/ubuntu/data/nyc-area-landmark-shapefile\"\n// Data link (in CSV): http://www.nyc.gov/html/tlc/html/about/trip_record_data.shtml\nval nyctripCSVLocation = \"/home/ubuntu/data/yellow_tripdata_2009-01-subset.csv\"\n\n// Prepare NYC area landmarks which includes airports, museums, colleges, hospitals\nvar arealmRDD = ShapefileReader.readToGeometryRDD(sc, nycArealandmarkShapefileLocation)\n// Use the center point of area landmarks to check co-location. This is required by Ripley's K function.\narealmRDD.rawSpatialRDD = arealmRDD.rawSpatialRDD.rdd.map[Geometry](f=>\n{\n  var geom = f.getCentroid\n  // Copy non-spatial attributes\n  geom.setUserData(f.getUserData)\n  geom\n})\nvar arealmDf = Adapter.toDf(arealmRDD, spark)\narealmDf.show()\n\n// Prepare NYC taxi trips. Only use the taxi trips' pickup points\nvar tripDf = spark.read.format(\"csv\").option(\"delimiter\",\",\").option(\"header\",\"false\").load(nyctripCSVLocation)\n// Convert from DataFrame to RDD. This can also be done directly through GeoSpark RDD API.\ntripDf.createOrReplaceTempView(\"tripdf\")\nspark.sql(\"CREATE OR REPLACE TEMP VIEW tripdf AS select ST_Point(cast(tripdf._c0 as Decimal(24, 14)), cast(tripdf._c1 as Decimal(24, 14))) AS geometry from tripdf\")\ntripDf = spark.table(\"tripdf\")\ntripDf.show()\nvar tripRDD = Adapter.toSpatialRdd(tripDf, \"geometry\")","user":"anonymous","dateUpdated":"2019-11-04T06:16:02+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","tableHide":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-------+--------+-------------+--------------------+-----+--------------------+--------------------+-----------+-----------+\n|            geometry|statefp|ansicode|       areaid|            fullname|mtfcc|               aland|              awater|   intptlat|   intptlon|\n+--------------------+-------+--------+-------------+--------------------+-----+--------------------+--------------------+-----------+-----------+\n|POINT (-73.888763...|     36|        |1102411323286|       Highland Park|K2180|338196.0000000000...|0.000000000000000...|+40.6853885|-73.8912170|\n|POINT (-73.781151...|     36|        | 110391537892|              Rat Is|C3023|7234.000000000000...|0.000000000000000...|+40.8554841|-73.7811514|\n|POINT (-73.910044...|     36|        | 110391537913|           Ewen Park|K2180|44478.00000000000...|0.000000000000000...|+40.8821342|-73.9100443|\n|POINT (-73.769725...|     36|        | 110391537916|             Hart Is|C3023|544868.0000000000...|0.000000000000000...|+40.8541547|-73.7697254|\n|POINT (-73.786045...|     36|        | 110391537918|             High Is|C3023|31182.00000000000...|0.000000000000000...|+40.8595313|-73.7860450|\n|POINT (-73.913141...|     36|        | 110391537929|Bronx Community Colg|K2543|173728.0000000000...|0.000000000000000...|+40.8574375|-73.9131413|\n|POINT (-73.875546...|     36|        | 110391537936|          Bronx Park|K2180|3061546.000000000...|39198.00000000000...|+40.8578720|-73.8755467|\n|POINT (-73.818693...|     36|        | 110391537938|            Goose Is|C3023|7185.000000000000...|0.000000000000000...|+40.8657054|-73.8186936|\n|POINT (-73.817622...|     36|        | 110391537939|            Goose Is|C3023|3090.000000000000...|0.000000000000000...|+40.8664547|-73.8176223|\n|POINT (-73.887698...|     36|        | 110391537941|          Hylan Park|K2180|20074.00000000000...|0.000000000000000...|+40.8390156|-73.8876981|\n|POINT (-73.916896...|     36|        | 110391537943|          Seton Park|K2180|80238.00000000000...|0.000000000000000...|+40.8864220|-73.9168967|\n|POINT (-73.882501...|     36|        | 110391537949|         Drakes Park|K2180|15710.00000000000...|0.000000000000000...|+40.8102962|-73.8825013|\n|POINT (-73.839162...|     36|        | 110391537950|         Haffen Park|K2180|47001.00000000000...|0.000000000000000...|+40.8736753|-73.8391629|\n|POINT (-73.894380...|     36|        | 110391537960|         Harris Park|K2180|257191.0000000000...|0.000000000000000...|+40.8764726|-73.8943804|\n|POINT (-73.927340...|     36|        | 110391537962|Hostos Community ...|K2543|15768.00000000000...|0.000000000000000...|+40.8175448|-73.9273408|\n|POINT (-73.894488...|     36|        | 110391537967|         Hunter Colg|K2543|127651.0000000000...|0.000000000000000...|+40.8729666|-73.8944890|\n|POINT (-73.895266...|     36|        | 110391537969|        Crotona Park|K2180|567508.0000000000...|0.000000000000000...|+40.8385593|-73.8952660|\n|POINT (-73.885358...|     36|        | 110391537971|        Fordham Univ|K2543|373619.0000000000...|0.000000000000000...|+40.8621224|-73.8853582|\n|POINT (-73.842217...|     36|        | 110391537976|       Edenwald Schl|K2543|118387.0000000000...|0.000000000000000...|+40.8834887|-73.8422171|\n|POINT (-73.897787...|     36|        | 110391537978|       St James Park|K2180|54248.00000000000...|0.000000000000000...|+40.8652042|-73.8977873|\n+--------------------+-------+--------+-------------+--------------------+-----+--------------------+--------------------+-----------+-----------+\nonly showing top 20 rows\n\n+--------------------+\n|            geometry|\n+--------------------+\n|POINT (-73.991957...|\n|POINT (-73.982102...|\n|POINT (-74.002587...|\n|POINT (-73.974267...|\n|POINT (-74.00158 ...|\n|POINT (-73.989806...|\n|POINT (-73.98405 ...|\n|POINT (-73.992635...|\n|POINT (-73.96969 ...|\n|POINT (-73.955173...|\n|POINT (-73.986824...|\n|POINT (-74.0061 4...|\n|POINT (-73.983339...|\n|POINT (-73.97351 ...|\n|POINT (-73.984426...|\n|POINT (-73.991064...|\n|POINT (-74.001678...|\n|POINT (-73.982457...|\n|POINT (-73.992554...|\n|POINT (-73.990089...|\n+--------------------+\nonly showing top 20 rows\n\nimport com.vividsolutions.jts.geom._\nimport org.apache.log4j.{Level, Logger}\nimport org.apache.spark.serializer.KryoSerializer\nimport org.apache.spark.sql.SparkSession\nimport org.datasyslab.geospark.enums.{GridType, IndexType}\nimport org.datasyslab.geospark.formatMapper.shapefileParser.ShapefileReader\nimport org.datasyslab.geospark.spatialOperator.JoinQuery\nimport org.datasyslab.geospark.spatialRDD.{CircleRDD, SpatialRDD}\nimport org.datasyslab.geosparksql.utils.{Adapter, GeoSparkSQLRegistrator}\nimport org.datasyslab.geosparkviz.sql.utils.GeoSparkVizRegistrator\nnycArealandmarkShapefileLocation: String = /home/ubuntu/data/nyc-area-landmark-shapefile\nnyctripCSVLocation: String = /home/ubuntu/data/yellow_tripdata_2009-01-subset.csv\narealmRDD: org.datasyslab.geospark.spatialRDD.SpatialRDD[co..."}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=255","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=256","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=257","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=258"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1572762235751_328783920","id":"20191103-062355_1578551300","dateCreated":"2019-11-03T06:23:55+0000","dateStarted":"2019-11-04T06:16:02+0000","dateFinished":"2019-11-04T06:16:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:187891"},{"text":"// Convert the Coordinate Reference System from degree-based to meter-based. This returns the accurate distance calculate.\narealmRDD.CRSTransform(\"epsg:4326\",\"epsg:3857\")\ntripRDD.CRSTransform(\"epsg:4326\",\"epsg:3857\")\n\narealmRDD.analyze()\ntripRDD.analyze()","user":"anonymous","dateUpdated":"2019-11-04T06:16:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res42: Boolean = true\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=259","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=260"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1572847825395_-1726612884","id":"20191104-061025_2065978533","dateCreated":"2019-11-04T06:10:25+0000","dateStarted":"2019-11-04T06:16:03+0000","dateFinished":"2019-11-04T06:16:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187892"},{"text":"// Cache indexed NYC taxi trip rdd to improve iterative performance\ntripRDD.spatialPartitioning(GridType.KDBTREE)\ntripRDD.buildIndex(IndexType.QUADTREE, true)\ntripRDD.indexedRDD = tripRDD.indexedRDD.cache()","user":"anonymous","dateUpdated":"2019-11-04T06:16:05+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tripRDD.indexedRDD: org.apache.spark.api.java.JavaRDD[com.vividsolutions.jts.index.SpatialIndex] = MapPartitionsRDD[1552] at mapPartitions at SpatialRDD.java:425\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=261"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1572842749497_1340024993","id":"20191104-044549_371187182","dateCreated":"2019-11-04T04:45:49+0000","dateStarted":"2019-11-04T06:16:05+0000","dateFinished":"2019-11-04T06:16:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187893"},{"text":"// Parameter settings. Check the definition of Ripley's K function.\nval area = tripRDD.boundaryEnvelope.getArea\nval maxDistance = 0.01*Math.max(tripRDD.boundaryEnvelope.getHeight,tripRDD.boundaryEnvelope.getWidth)\nval iterationTimes = 10\nval distanceIncrement = maxDistance/iterationTimes\nval beginDistance = 0.0\nvar currentDistance = 0.0","user":"anonymous","dateUpdated":"2019-11-04T06:16:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"area: Double = 9.576308622735842E9\nmaxDistance: Double = 2203.8254269927925\niterationTimes: Int = 10\ndistanceIncrement: Double = 220.38254269927924\nbeginDistance: Double = 0.0\ncurrentDistance: Double = 0.0\n"}]},"apps":[],"jobName":"paragraph_1572844696388_-1652684934","id":"20191104-051816_131138242","dateCreated":"2019-11-04T05:18:16+0000","dateStarted":"2019-11-04T06:16:07+0000","dateFinished":"2019-11-04T06:16:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187894"},{"text":"// Start the iteration\nvar result = Seq[(Double, Double, Double, String)]()\nfor (i <- 1 to iterationTimes)\n{\n  currentDistance = beginDistance + i*distanceIncrement\n  var bufferedArealmRDD = new CircleRDD(arealmRDD,currentDistance)\n  bufferedArealmRDD.spatialPartitioning(tripRDD.getPartitioner)\n  //    Run GeoSpark Distance Join Query\n  var adjacentMatrix = JoinQuery.DistanceJoinQueryFlat(tripRDD, bufferedArealmRDD,true,true)\n  //      Uncomment the following two lines if you want to see what the join result looks like in SparkSQL\n//   var adjacentMatrixDf = Adapter.toDf(adjacentMatrix, spark)\n//   adjacentMatrixDf.show()\n  var observedK = adjacentMatrix.count()*area*1.0/(arealmRDD.approximateTotalCount*tripRDD.approximateTotalCount)\n  var observedL = Math.sqrt(observedK/Math.PI)\n  var expectedL = currentDistance\n  var colocationDifference = observedL  - expectedL\n  var colocationStatus = {if (colocationDifference>0) \"Co-located\" else \"Dispersed\"}\n  result = result :+ (currentDistance, observedL, expectedL, colocationStatus)\n}\nimport spark.implicits._\nvar df = result.toDF(\"distance(meter)\", \"observed\", \"expected\", \"coLocationStatus\")\n// df.show\ndf.createOrReplaceTempView(\"ripleyk\")","user":"anonymous","dateUpdated":"2019-11-04T06:16:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"result: Seq[(Double, Double, Double, String)] = List((220.38254269927924,460.01562445344973,220.38254269927924,Co-located), (440.7650853985585,992.974262190864,440.7650853985585,Co-located), (661.1476280978377,1466.3570212056231,661.1476280978377,Co-located), (881.530170797117,1985.5558881441837,881.530170797117,Co-located), (1101.9127134963962,2486.9267226005827,1101.9127134963962,Co-located), (1322.2952561956754,2978.746814921356,1322.2952561956754,Co-located), (1542.6777988949548,3459.7458180230706,1542.6777988949548,Co-located), (1763.060341594234,3954.039191360789,1763.060341594234,Co-located), (1983.442884293513,4449.148384902259,1983.442884293513,Co-located), (2203.8254269927925,4904.627832238354,2203.8254269927925,Co-located))\nimport spark.implicits._\ndf: org.apache.spark.sql.Da..."}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=262","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=263","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=264","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=265","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=266","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=267","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=268","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=269","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=270","http://ip-172-31-14-105.ec2.internal:4040/jobs/job?id=271"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1572844707920_-306056615","id":"20191104-051827_1162306511","dateCreated":"2019-11-04T05:18:27+0000","dateStarted":"2019-11-04T06:16:07+0000","dateFinished":"2019-11-04T06:16:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187895"},{"text":"%sql\n-- Plot the line curve the result\n-- Observed K is higher than the expected K\n-- Colocation pattern exists in these distance points\nSELECT *\nFROM ripleyk","user":"anonymous","dateUpdated":"2019-11-04T06:24:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"distance(meter)":"string","observed":"string","expected":"string","coLocationStatus":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","stacked":true},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"distance(meter)","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"expected","index":2,"aggr":"avg"},{"name":"observed","index":1,"aggr":"avg"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"distance(meter)\tobserved\texpected\tcoLocationStatus\n220.38254269927924\t460.01562445344973\t220.38254269927924\tCo-located\n440.7650853985585\t992.974262190864\t440.7650853985585\tCo-located\n661.1476280978377\t1466.3570212056231\t661.1476280978377\tCo-located\n881.530170797117\t1985.5558881441837\t881.530170797117\tCo-located\n1101.9127134963962\t2486.9267226005827\t1101.9127134963962\tCo-located\n1322.2952561956754\t2978.746814921356\t1322.2952561956754\tCo-located\n1542.6777988949548\t3459.7458180230706\t1542.6777988949548\tCo-located\n1763.060341594234\t3954.039191360789\t1763.060341594234\tCo-located\n1983.442884293513\t4449.148384902259\t1983.442884293513\tCo-located\n2203.8254269927925\t4904.627832238354\t2203.8254269927925\tCo-located\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1572844742688_981871710","id":"20191104-051902_2028686225","dateCreated":"2019-11-04T05:19:02+0000","dateStarted":"2019-11-04T06:16:16+0000","dateFinished":"2019-11-04T06:16:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187896"},{"text":"%sql\n","user":"anonymous","dateUpdated":"2019-11-04T06:16:17+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1572847187268_-1575377340","id":"20191104-055947_798871852","dateCreated":"2019-11-04T05:59:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187897"}],"name":"GeoSpark_Tutorial/5_CoLocation_Pattern_Mining","id":"2EQUPZ5XV","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}